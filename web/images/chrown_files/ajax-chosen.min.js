
(function($) {
    return $.fn.ajaxChosen = function(settings, callback, chosenOptions) {
        var chosenXhr, defaultOptions, options, select;
        if (settings == null) {
            settings = {};
        }
        if (chosenOptions == null) {
            chosenOptions = {};
        }
        defaultOptions = {
            minTermLength: 2,
            afterTypeDelay: 500,
            jsonTermKey: "title",
            keepTypingMsg: "Продолжайте вводить...",
            lookingForMsg: "Ищем"
        };
        select = this;
        chosenXhr = null;
        options = $.extend({}, defaultOptions, $(select).data(), settings);
        this.chosen(chosenOptions ? chosenOptions : {});
        this.chosen().winnow_results;
        return this.each(function() {
            // Add event on keyupt for search
            return $(this).next('.chosen-container').find(".search-field > input, .chosen-search > input").bind('keyup', function() {
                var field, msg, success, untrimmed_val, val;
                untrimmed_val = $(this).val();
                val = $.trim($(this).val());
                msg = val.length < options.minTermLength ? options.keepTypingMsg : options.lookingForMsg + (" '" + val + "'");
                select.next('.chosen-container').find('.no-results').text(msg);
                if (val === $(this).data('prevVal')) {
                    return false;
                }
                $(this).data('prevVal', val);
                // If already started timer for search
                if (this.timer) {
                    clearTimeout(this.timer);
                }
                if (val.length < options.minTermLength) {
                    return false;
                }
                field = $(this);
                if (options.data == null) {
                    options.data = {};
                }
                options.data[options.jsonTermKey] = val;
                if (options.dataCallback != null) {
                    options.data = options.dataCallback(options.data);
                }
                success = options.success;
                options.success = function(data) {
                    var items, nbItems, selected_values;
                    if (data == null) {
                        return;
                    }
                    selected_values = [];
                    select.find('option').each(function() {

                        return $(this).remove();
                    });
                    select.find('optgroup:empty').each(function() {
                        return $(this).remove();
                    });
                    items = callback != null ? callback(data, field) : data;
                    nbItems = 0;
                    $.each(items, function(i, element) {
                        var group, text, value;
                        nbItems++;
                        if (typeof element === "string") {
                            value = i;
                            text = element;
                        } else {
                            value = element.value;
                            text = element.text;
                        }
                        if ($.inArray(value + "-" + text, selected_values) === -1) {
                            return $("<option />").attr('value', value).html(text).appendTo(select);
                        }
                    });

                    if (nbItems) {
                        select.trigger("chosen:updated");
                        select.trigger("chosen:activate");
                    } else {
                        select.data().chosen.no_results_clear();
                        select.data().chosen.no_results(field.val());
                    }
                    if (settings.success != null) {
                        settings.success(data);
                    }
                    var result =  field.val(untrimmed_val);
                    select.data().chosen.winnow_results();
                    return result;
                };
                return this.timer = setTimeout(function() {
                    if (chosenXhr) {
                        chosenXhr.abort();
                    }
                    return chosenXhr = $.ajax(options);
                }, options.afterTypeDelay);
            });
        });
    };
})(jQuery);